// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/liuzhaomax/go-maxms/internal/api"
	"github.com/liuzhaomax/go-maxms/internal/core"
	"github.com/liuzhaomax/go-maxms/internal/middleware"
	"github.com/liuzhaomax/go-maxms/internal/middleware/auth"
	"github.com/liuzhaomax/go-maxms/internal/middleware/reverse_proxy"
	"github.com/liuzhaomax/go-maxms/internal/middleware/tracing"
	"github.com/liuzhaomax/go-maxms/internal/middleware/validator"
	"github.com/liuzhaomax/go-maxms/src/api_user/handler"
	"github.com/liuzhaomax/go-maxms/src/api_user/model"
)

// Injectors from wire.go:

func InitInjector() (*Injector, func(), error) {
	engine := core.InitGinEngine()
	logger := core.InitLogrus()
	client, cleanup, err := core.InitRedis()
	if err != nil {
		return nil, nil, err
	}
	authAuth := &auth.Auth{
		Logger: logger,
		Redis:  client,
	}
	validatorValidator := &validator.Validator{
		Logger: logger,
		Redis:  client,
	}
	configuration := core.InitTracer()
	tracingTracing := &tracing.Tracing{
		Logger:       logger,
		TracerConfig: configuration,
	}
	reverseProxy := &reverse_proxy.ReverseProxy{
		Logger:      logger,
		RedisClient: client,
	}
	middlewareMiddleware := &middleware.Middleware{
		Auth:         authAuth,
		Validator:    validatorValidator,
		Tracing:      tracingTracing,
		ReverseProxy: reverseProxy,
	}
	db, cleanup2, err := core.InitDB()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	modelUser := &model.ModelUser{
		DB: db,
	}
	rocketMQ := &core.RocketMQ{}
	trans := &core.Trans{
		DB: db,
	}
	handlerUser := &handler.HandlerUser{
		Model:    modelUser,
		Logger:   logger,
		RocketMQ: rocketMQ,
		Tx:       trans,
		Redis:    client,
	}
	registry := core.InitPrometheusRegistry()
	apiHandler := &api.Handler{
		Middleware:         middlewareMiddleware,
		HandlerUser:        handlerUser,
		PrometheusRegistry: registry,
	}
	injectorHTTP := InjectorHTTP{
		Engine:  engine,
		Handler: apiHandler,
		DB:      db,
		Redis:   client,
	}
	injector := &Injector{
		InjectorHTTP: injectorHTTP,
	}
	return injector, func() {
		cleanup2()
		cleanup()
	}, nil
}
